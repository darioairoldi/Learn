name: Quarto Site Render and Deploy to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # with:
      #   lfs: true
      #   lfs-include: |
      #     docs/**/*.png
      #     docs/**/*.jpg
      #     docs/**/*.jpeg
      #     docs/**/*.gif
      #     assets/**/*.png
      #     assets/**/*.jpg
      #     *.png
      #     *.jpg
      #     *.jpeg
      #   # Exclude large files not needed for build
      #   lfs-exclude: |
      #     **/*.mp4
      #     **/*.avi
      #     **/*.mov
      #     **/*.zip
      #     **/*.exe
      #     **/*.msi
      #     **/*.pdf  

    - name: Setup Quarto (Native Windows)
      shell: pwsh
      run: |
        Write-Host "Setting up Quarto using native Windows installation..."
        
        # Check if Quarto is already installed
        try {
          $existing = quarto --version 2>$null
          if ($existing) {
            Write-Host "Quarto already installed: $existing"
            exit 0
          }
        } catch {
          Write-Host "Quarto not found, proceeding with installation..."
        }
        
        # Download and install Quarto for Windows
        $quartoVersion = "1.4.550"  # Use latest stable version
        $quartoUrl = "https://github.com/quarto-dev/quarto-cli/releases/download/v$quartoVersion/quarto-$quartoVersion-win.msi"
        
        Write-Host "Downloading Quarto from: $quartoUrl"
        try {
          Invoke-WebRequest -Uri $quartoUrl -OutFile "quarto-installer.msi" -UseBasicParsing
          Write-Host "Download completed successfully"
          Write-Host "File size: $((Get-Item 'quarto-installer.msi').Length) bytes"
        } catch {
          Write-Host "Download failed: $_"
          exit 1
        }
        
        # Install Quarto silently
        Write-Host "Installing Quarto..."
        try {
          $process = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "quarto-installer.msi", "/quiet", "/norestart" -Wait -PassThru
          Write-Host "Installation completed with exit code: $($process.ExitCode)"
        } catch {
          Write-Host "Installation failed: $_"
          exit 1
        }
        
        # Add Quarto to PATH for current session
        $quartoPath = "C:\Program Files\Quarto\bin"
        if (Test-Path $quartoPath) {
          $env:PATH = "$quartoPath;$env:PATH"
          Write-Host "Added $quartoPath to PATH"
          
          # Persist PATH for subsequent steps
          echo $quartoPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Verify installation
          $version = & "$quartoPath\quarto.exe" --version
          Write-Host "Quarto installed successfully: $version"
        } else {
          Write-Host "Quarto installation directory not found at $quartoPath"
          # Check alternative locations
          $altPath = "C:\Program Files (x86)\Quarto\bin"
          if (Test-Path $altPath) {
            Write-Host "Found Quarto at alternative location: $altPath"
            $env:PATH = "$altPath;$env:PATH"
            echo $altPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            Write-Host "Quarto not found in expected locations"
            exit 1
          }
        }
        
    - name: Check for Python requirements
      id: check-python
      shell: pwsh
      run: |
        if ((Test-Path "requirements.txt") -or (Test-Path "pyproject.toml")) {
          echo "python-needed=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "python-needed=false" >> $env:GITHUB_OUTPUT
        }
        
    - name: Setup Python (if needed for computations)
      if: steps.check-python.outputs.python-needed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Python dependencies (if needed)
      if: steps.check-python.outputs.python-needed == 'true'
      shell: pwsh
      run: |
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        } elseif (Test-Path "pyproject.toml") {
          pip install -e .
        }
        
    - name: Setup R (if needed for computations)
      uses: r-lib/actions/setup-r@v2
      if: false  # Set to true if you use R
      with:
        r-version: '4.3.0'

    - name: Install yq for YAML processing
      shell: pwsh
      run: |
        # Download and install yq for Windows
        $yqVersion = "v4.40.5"  # Use a specific version for reliability
        $yqUrl = "https://github.com/mikefarah/yq/releases/download/$yqVersion/yq_windows_amd64.exe"
        
        Write-Host "Downloading yq from $yqUrl"
        Invoke-WebRequest -Uri $yqUrl -OutFile "yq.exe"
        
        # Verify download
        if (Test-Path "yq.exe") {
          Write-Host "yq downloaded successfully"
          .\yq.exe --version
        } else {
          Write-Error "Failed to download yq"
          exit 1
        }

    - name: Extract navigation structure to JSON
      shell: pwsh
      run: |
        # Extract sidebar structure from _quarto.yml and convert to JSON
        Write-Host "Extracting sidebar structure from _quarto.yml..."
        
        if (Test-Path "_quarto.yml") {
          # Use yq to extract the website.sidebar structure and format it properly
          Write-Host "Using yq to extract sidebar structure..."
          .\yq.exe eval '.website.sidebar | {"contents": .contents}' _quarto.yml --output-format=json | Out-File -FilePath "navigation.json" -Encoding utf8 -NoNewline
          
          Write-Host "Generated navigation.json:"
          $navContent = Get-Content "navigation.json" -Raw
          Write-Host $navContent
          
          # Validate the JSON
          try {
            $json = $navContent | ConvertFrom-Json
            Write-Host "? JSON validation successful"
            if ($json.contents -and $json.contents.Count) {
              Write-Host "Found $($json.contents.Count) top-level sections"
              # Show first few sections for debugging
              $json.contents | Select-Object -First 3 | ForEach-Object {
                if ($_.section) {
                  Write-Host "  Section: $($_.section)"
                } elseif ($_.text) {
                  Write-Host "  Item: $($_.text)"
                }
              }
            } else {
              Write-Warning "No contents found in navigation structure"
            }
          } catch {
            Write-Warning "? JSON validation failed: $_"
            Write-Host "Generating fallback empty structure..."
            '{"contents": []}' | Out-File -FilePath "navigation.json" -Encoding utf8 -NoNewline
          }
        } else {
          Write-Host "_quarto.yml not found, creating empty navigation.json"
          '{"contents": []}' | Out-File -FilePath "navigation.json" -Encoding utf8 -NoNewline
        }
        
    - name: Render Quarto Project
      shell: pwsh
      run: quarto render

    - name: Copy navigation data to published site
      shell: pwsh
      run: |
        # Copy navigation.json to the published site for client-side navigation
        Write-Host "Copying navigation data to published site..."
        
        if (Test-Path "navigation.json") {
          if (-not (Test-Path "docs")) {
            New-Item -ItemType Directory -Path "docs" -Force
            Write-Host "Created docs directory"
          }
          
          # Copy to site root (primary location)
          Copy-Item "navigation.json" "docs/navigation.json" -Force
          Write-Host "? Copied navigation.json to docs/navigation.json"
          
          # Dynamically copy to all subdirectories that contain rendered content
          # This ensures navigation.json is available regardless of directory structure changes
          Write-Host "Copying navigation.json to all content subdirectories..."
          
          $subdirCount = 0
          Get-ChildItem "docs" -Directory -Recurse | ForEach-Object {
            $subdir = $_.FullName
            # Only copy to directories that contain HTML files (actual content directories)
            if ((Get-ChildItem $subdir -Filter "*.html" -ErrorAction SilentlyContinue).Count -gt 0) {
              Copy-Item "navigation.json" "$subdir/navigation.json" -Force
              Write-Host "  ? Copied to: $($_.Name)"
              $subdirCount++
            }
          }
          
          Write-Host "? Copied navigation.json to $subdirCount content subdirectories"
          
          # Verify the main copy
          if (Test-Path "docs/navigation.json") {
            $fileSize = (Get-Item "docs/navigation.json").Length
            Write-Host "? Verified: docs/navigation.json exists (${fileSize} bytes)"
            
            # Show content preview for validation
            Write-Host "Content preview:"
            $content = Get-Content "docs/navigation.json" -Raw
            if ($content.Length -gt 500) {
              Write-Host $content.Substring(0, 500) + "..."
            } else {
              Write-Host $content
            }
          } else {
            Write-Error "? Failed to copy navigation.json to docs directory"
          }
        } else {
          Write-Warning "? navigation.json not found, skipping copy"
          Write-Host "Current directory contents:"
          Get-ChildItem . | ForEach-Object { Write-Host "  $($_.Name)" }
        }
      
    - name: Debug output directory
      shell: pwsh
      run: |
        Write-Host "=== Checking output directory ==="
        if (Test-Path "docs") {
          Write-Host "docs directory exists"
          Get-ChildItem "docs" -Recurse | ForEach-Object {
            Write-Host "  $($_.FullName)"
          }
        } else {
          Write-Host "docs directory not found"
          Write-Host "Current directory contents:"
          Get-ChildItem . | ForEach-Object {
            Write-Host "  $($_.Name) $(if($_.PSIsContainer){'(dir)'}else{"($($_.Length) bytes)"})"
          }
        }
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload Pages artifact (Alternative)
      uses: actions/upload-artifact@v4
      with:
        name: github-pages-build
        path: docs/
        retention-days: 1

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download Pages artifact
      uses: actions/download-artifact@v4
      with:
        name: github-pages-build
        path: pages/
        
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages/
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
