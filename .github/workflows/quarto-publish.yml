name: Render and Deploy Quarto Site to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # with:
      #   lfs: true
      #   lfs-include: |
      #     docs/**/*.png
      #     docs/**/*.jpg
      #     docs/**/*.jpeg
      #     docs/**/*.gif
      #     assets/**/*.png
      #     assets/**/*.jpg
      #     *.png
      #     *.jpg
      #     *.jpeg
      #   # Exclude large files not needed for build
      #   lfs-exclude: |
      #     **/*.mp4
      #     **/*.avi
      #     **/*.mov
      #     **/*.zip
      #     **/*.exe
      #     **/*.msi
      #     **/*.pdf  

    - name: Setup System PATH
      shell: pwsh
      run: |
        # Ensure System32 is in PATH for WSL access
        $system32 = "C:\Windows\System32"
        if ($env:PATH -notlike "*$system32*") {
          $env:PATH = "$system32;$env:PATH"
          Write-Host "Added $system32 to PATH"
        }
        
        # Persist PATH for subsequent steps
        echo "$system32" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        Write-Host "Current PATH contains System32: $($env:PATH -like '*System32*')"

    - name: Diagnose WSL Installation
      shell: pwsh
      run: |
        Write-Host "=== WSL Installation Diagnostics ==="
        
        # Check if wsl.exe exists at expected location
        $wslPaths = @(
          "C:\Windows\System32\wsl.exe",
          "C:\Windows\SysWOW64\wsl.exe"
        )
        
        foreach ($path in $wslPaths) {
          Write-Host "Checking: $path"
          if (Test-Path $path) {
            Write-Host "  ? File exists"
            try {
              $fileInfo = Get-Item $path
              Write-Host "  Size: $($fileInfo.Length) bytes"
              Write-Host "  Created: $($fileInfo.CreationTime)"
              Write-Host "  Modified: $($fileInfo.LastWriteTime)"
            } catch {
              Write-Host "  ? Cannot read file info: $_"
            }
          } else {
            Write-Host "  ? File not found"
          }
        }
        
        # Check Windows features
        Write-Host "`n=== Windows Features ==="
        try {
          $features = @(
            "Microsoft-Windows-Subsystem-Linux",
            "VirtualMachinePlatform"
          )
          
          foreach ($feature in $features) {
            try {
              $state = Get-WindowsOptionalFeature -Online -FeatureName $feature -ErrorAction SilentlyContinue
              Write-Host "$feature`: $($state.State)"
            } catch {
              Write-Host "$feature`: Unable to check - $_"
            }
          }
        } catch {
          Write-Host "Cannot check Windows features: $_"
        }
        
        # Check for WSL distributions
        Write-Host "`n=== WSL Distributions ==="
        try {
          # Try using reg query to check for WSL
          $regOutput = reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Lxss" 2>$null
          if ($LASTEXITCODE -eq 0) {
            Write-Host "WSL registry entries found"
          } else {
            Write-Host "No WSL registry entries found"
          }
        } catch {
          Write-Host "Cannot check WSL registry: $_"
        }
        
        # Check current user and permissions
        Write-Host "`n=== Environment Info ==="
        Write-Host "Current user: $env:USERNAME"
        Write-Host "Computer: $env:COMPUTERNAME"
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
        
        # Check PATH
        Write-Host "`n=== PATH Contents ==="
        $env:PATH -split ';' | Where-Object { $_ -like '*System32*' -or $_ -like '*Windows*' } | ForEach-Object {
          Write-Host "  $_"
        }

    - name: Test WSL Access
      shell: pwsh
      run: |
        Write-Host "Testing WSL availability..."
        
        # Test different approaches
        Write-Host "`n--- Method 1: Call operator with full path ---"
        try {
          & "C:\Windows\System32\wsl.exe" --version 2>&1
        } catch {
          Write-Host "Method 1 failed: $_"
        }
        
        Write-Host "`n--- Method 2: Start-Process ---"
        try {
          $result = Start-Process -FilePath "C:\Windows\System32\wsl.exe" -ArgumentList "--version" -Wait -NoNewWindow -PassThru -RedirectStandardOutput "wsl-output.txt" -RedirectStandardError "wsl-error.txt"
          Write-Host "Exit code: $($result.ExitCode)"
          if (Test-Path "wsl-output.txt") {
            Write-Host "Output:"
            Get-Content "wsl-output.txt"
          }
          if (Test-Path "wsl-error.txt") {
            Write-Host "Errors:"
            Get-Content "wsl-error.txt"
          }
        } catch {
          Write-Host "Method 2 failed: $_"
        }

    - name: Setup Quarto (via Action)
      continue-on-error: true
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: pre-release
        
    - name: Check for Python requirements
      id: check-python
      shell: pwsh
      run: |
        if ((Test-Path "requirements.txt") -or (Test-Path "pyproject.toml")) {
          echo "python-needed=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "python-needed=false" >> $env:GITHUB_OUTPUT
        }
        
    - name: Setup Python (if needed for computations)
      if: steps.check-python.outputs.python-needed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Python dependencies (if needed)
      if: steps.check-python.outputs.python-needed == 'true'
      shell: pwsh
      run: |
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        } elseif (Test-Path "pyproject.toml") {
          pip install -e .
        }
        
    - name: Setup R (if needed for computations)
      uses: r-lib/actions/setup-r@v2
      if: false  # Set to true if you use R
      with:
        r-version: '4.3.0'

    - name: Install yq for YAML processing
      shell: pwsh
      run: |
        # Download and install yq for Windows
        $yqVersion = "v4.40.5"  # Use a specific version for reliability
        $yqUrl = "https://github.com/mikefarah/yq/releases/download/$yqVersion/yq_windows_amd64.exe"
        
        Write-Host "Downloading yq from $yqUrl"
        Invoke-WebRequest -Uri $yqUrl -OutFile "yq.exe"
        
        # Verify download
        if (Test-Path "yq.exe") {
          Write-Host "yq downloaded successfully"
          .\yq.exe --version
        } else {
          Write-Error "Failed to download yq"
          exit 1
        }

    - name: Extract navigation structure to JSON
      shell: pwsh
      run: |
        # Extract sidebar structure from _quarto.yml and convert to JSON
        Write-Host "Extracting sidebar structure from _quarto.yml..."
        
        if (Test-Path "_quarto.yml") {
          .\yq.exe '.website.sidebar' _quarto.yml | Out-File -FilePath "navigation.json" -Encoding utf8
          Write-Host "Generated navigation.json:"
          Get-Content "navigation.json"
        } else {
          Write-Host "_quarto.yml not found, creating empty navigation.json"
          '{}' | Out-File -FilePath "navigation.json" -Encoding utf8
        }
        
    - name: Render Quarto Project
      shell: pwsh
      run: quarto render

    - name: Copy navigation data to published site
      shell: pwsh
      run: |
        # Copy navigation.json to the published site for client-side navigation
        if (Test-Path "navigation.json") {
          if (-not (Test-Path "docs")) {
            New-Item -ItemType Directory -Path "docs" -Force
          }
          Copy-Item "navigation.json" "docs/navigation.json" -Force
          Write-Host "Copied navigation.json to docs/navigation.json"
          Get-ChildItem "docs/navigation.json" -Force
        } else {
          Write-Warning "navigation.json not found, skipping copy"
        }
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    - name: Setup Quarto (Fallback to Native Windows)
      if: failure() || always()
      shell: pwsh
      run: |
        Write-Host "Setting up Quarto using native Windows installation..."
        
        # Check if Quarto is already installed
        try {
          $existing = quarto --version 2>$null
          Write-Host "Quarto already installed: $existing"
          exit 0
        } catch {
          Write-Host "Quarto not found, proceeding with installation..."
        }
        
        # Download and install Quarto for Windows
        $quartoVersion = "1.4.550"  # Use latest stable version
        $quartoUrl = "https://github.com/quarto-dev/quarto-cli/releases/download/v$quartoVersion/quarto-$quartoVersion-win.msi"
        
        Write-Host "Downloading Quarto from: $quartoUrl"
        try {
          Invoke-WebRequest -Uri $quartoUrl -OutFile "quarto-installer.msi" -UseBasicParsing
          Write-Host "Download completed successfully"
        } catch {
          Write-Host "Download failed: $_"
          exit 1
        }
        
        # Install Quarto silently
        Write-Host "Installing Quarto..."
        try {
          $process = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "quarto-installer.msi", "/quiet", "/norestart" -Wait -PassThru
          Write-Host "Installation completed with exit code: $($process.ExitCode)"
        } catch {
          Write-Host "Installation failed: $_"
          exit 1
        }
        
        # Add Quarto to PATH for current session
        $quartoPath = "C:\Program Files\Quarto\bin"
        if (Test-Path $quartoPath) {
          $env:PATH = "$quartoPath;$env:PATH"
          Write-Host "Added $quartoPath to PATH"
          
          # Persist PATH for subsequent steps
          echo $quartoPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        } else {
          Write-Host "Quarto installation directory not found at $quartoPath"
          exit 1
        }
        
        # Verify installation
        try {
          $version = quarto --version
          Write-Host "Quarto installed successfully: $version"
        } catch {
          Write-Host "Quarto installation verification failed: $_"
          exit 1
        }
